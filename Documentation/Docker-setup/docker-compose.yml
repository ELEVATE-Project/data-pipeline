version: '2.2'

services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.3.0
    container_name: zookeeper
    ports:
      - '2181:2181'
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
      - ZOOKEEPER_CLIENT_PORT=2181
      - ZOOKEEPER_TICK_TIME=2000
    networks:
      - elevate_net
    logging:
      driver: none
  kafka:
    image: confluentinc/cp-kafka:7.3.0
    container_name: kafka
    ports:
      - '9092:9092'
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://kafka:9093
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    depends_on:
      - zookeeper
    networks:
      - elevate_net
    logging:
        driver: none
    volumes:
      - kafka_data:/var/lib/kafka/


  # Flink Job Manager
  jobmanager:
    image: flink:1.13.2-scala_2.12-java11
    container_name: jobmanager
    ports:
      - "8081:8081"
    command: jobmanager
    environment:
      - |
        FLINK_PROPERTIES=
        jobmanager.rpc.address: jobmanager
    networks:
      - elevate_net

  # Flink Task Manager
  taskmanager:
    image: flink:1.13.2-scala_2.12-java11
    container_name: taskmanager
    depends_on:
      - jobmanager
    command: taskmanager
    scale: 1
    environment:
      - |
        FLINK_PROPERTIES=
        jobmanager.rpc.address: jobmanager
        taskmanager.numberOfTaskSlots: 3
    networks:
      - elevate_net
    volumes:
      - flink_shared:/opt/flink/usrlib/

  # PostgreSQL
  postgres:
    image: postgres:latest
    container_name: postgres
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - elevate_net

  # pgAdmin
  pgadmin:
    image: dpage/pgadmin4
    container_name: pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD}
    ports:
      - "5050:80"
    depends_on:
      - postgres
    networks:
      - elevate_net
    volumes:
      - pgadmin_data:/var/lib/pgadmin

  # Metabase
  metabase:
    image: metabase/metabase:latest
    container_name: metabase
    environment:
      MB_DB_TYPE: ${MB_DB_TYPE}
      MB_DB_DBNAME: ${POSTGRES_DB}
      MB_DB_PORT: ${POSTGRES_PORT}
      MB_DB_USER: ${POSTGRES_USER}
      MB_DB_PASS: ${POSTGRES_PASSWORD}
      MB_DB_HOST: ${POSTGRES_HOST}
    ports:
      - "3000:3000"
    depends_on:
      - postgres
    networks:
      - elevate_net
    volumes:
      - metabase_data:/dev/random:ro

  # Elevate Data Service
  elevate-data:
    image: shikshalokamqa/elevate-data:v1.0
    container_name: elevate-data
    ports:
      - "8080:8080"
    depends_on:
      - kafka
      - postgres
      - jobmanager
      - taskmanager
      - metabase
    networks:
      - elevate_net
    volumes:
      - ./config_files/base-config.conf:/app/jobs-core/src/main/resources/base-config.conf
      - ./config_files/metabase-dashboard.conf:/app/metabase-jobs/dashboard-creator/src/main/resources/metabase-dashboard.conf
      - ./config_files/project-stream.conf:/app/project-jobs/project-stream-processor/src/main/resources/project-stream.conf
      - ./config_files/application.conf:/app/metabase-jobs/users-via-csv/src/main/resources/application.conf
      - ./create-table.sh:/app/Documentation/Docker-setup/create-table.sh
      - ./submit-jobs.sh:/app/Documentation/Docker-setup/submit-jobs.sh
      -  elevate_data:/app/
      - ./user_data.csv:/app/Documentation/Docker-setup/user_data.csv
      - ./logs:/app/logs
    entrypoint: ["/bin/bash", "-c", "sleep infinity"]

# Networks
networks:
  elevate_net:
    name: elevate_net
    external: false

# Volumes for persistence
volumes:
  postgres_data:
    driver: local
  pgadmin_data:
    driver: local
  flink_shared:
    driver: local
  metabase_data:
    driver: local
  elevate_data:
    driver: local
  kafka_data:
    driver: local